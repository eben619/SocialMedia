/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SocialMedia {
  export type SearchResultStruct = {
    id: BigNumberish;
    creator: AddressLike;
    contentURI: string;
    description: string;
    timestamp: BigNumberish;
  };

  export type SearchResultStructOutput = [
    id: bigint,
    creator: string,
    contentURI: string,
    description: string,
    timestamp: bigint
  ] & {
    id: bigint;
    creator: string;
    contentURI: string;
    description: string;
    timestamp: bigint;
  };
}

export interface SocialMediaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "commentOnContent"
      | "content"
      | "contentCount"
      | "createContent"
      | "createGroup"
      | "deleteContent"
      | "getComments"
      | "getContent"
      | "isMemberOfGroup"
      | "joinGroup"
      | "metaTransaction"
      | "nonces"
      | "searchContent"
      | "setUserRole"
      | "userRoles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContentCreated" | "ContentDeleted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commentOnContent",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "content",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createContent",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "createGroup", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberOfGroup",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGroup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metaTransaction",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "searchContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRoles",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commentOnContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMemberOfGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "searchContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRoles", data: BytesLike): Result;
}

export namespace ContentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    contentURI: string,
    description: string
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    contentURI: string,
    description: string
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    contentURI: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentDeletedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SocialMedia extends BaseContract {
  connect(runner?: ContractRunner | null): SocialMedia;
  waitForDeployment(): Promise<this>;

  interface: SocialMediaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  commentOnContent: TypedContractMethod<
    [contentId: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;

  content: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint] & {
        id: bigint;
        creator: string;
        contentURI: string;
        description: string;
        timestamp: bigint;
        commentsCount: bigint;
      }
    ],
    "view"
  >;

  contentCount: TypedContractMethod<[], [bigint], "view">;

  createContent: TypedContractMethod<
    [contentURI: string, description: string],
    [void],
    "nonpayable"
  >;

  createGroup: TypedContractMethod<[name: string], [void], "nonpayable">;

  deleteContent: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getComments: TypedContractMethod<
    [contentId: BigNumberish],
    [string[]],
    "view"
  >;

  getContent: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, string, bigint]],
    "view"
  >;

  isMemberOfGroup: TypedContractMethod<
    [user: AddressLike, groupAddress: AddressLike],
    [boolean],
    "view"
  >;

  joinGroup: TypedContractMethod<
    [groupAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  metaTransaction: TypedContractMethod<
    [
      nonce: BigNumberish,
      signature: BytesLike,
      destination: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  searchContent: TypedContractMethod<
    [keyword: string],
    [SocialMedia.SearchResultStructOutput[]],
    "view"
  >;

  setUserRole: TypedContractMethod<
    [user: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  userRoles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "commentOnContent"
  ): TypedContractMethod<
    [contentId: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "content"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint] & {
        id: bigint;
        creator: string;
        contentURI: string;
        description: string;
        timestamp: bigint;
        commentsCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createContent"
  ): TypedContractMethod<
    [contentURI: string, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGroup"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteContent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getComments"
  ): TypedContractMethod<[contentId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMemberOfGroup"
  ): TypedContractMethod<
    [user: AddressLike, groupAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGroup"
  ): TypedContractMethod<[groupAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "metaTransaction"
  ): TypedContractMethod<
    [
      nonce: BigNumberish,
      signature: BytesLike,
      destination: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "searchContent"
  ): TypedContractMethod<
    [keyword: string],
    [SocialMedia.SearchResultStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setUserRole"
  ): TypedContractMethod<
    [user: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRoles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ContentCreated"
  ): TypedContractEvent<
    ContentCreatedEvent.InputTuple,
    ContentCreatedEvent.OutputTuple,
    ContentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ContentDeleted"
  ): TypedContractEvent<
    ContentDeletedEvent.InputTuple,
    ContentDeletedEvent.OutputTuple,
    ContentDeletedEvent.OutputObject
  >;

  filters: {
    "ContentCreated(uint256,address,string,string)": TypedContractEvent<
      ContentCreatedEvent.InputTuple,
      ContentCreatedEvent.OutputTuple,
      ContentCreatedEvent.OutputObject
    >;
    ContentCreated: TypedContractEvent<
      ContentCreatedEvent.InputTuple,
      ContentCreatedEvent.OutputTuple,
      ContentCreatedEvent.OutputObject
    >;

    "ContentDeleted(uint256)": TypedContractEvent<
      ContentDeletedEvent.InputTuple,
      ContentDeletedEvent.OutputTuple,
      ContentDeletedEvent.OutputObject
    >;
    ContentDeleted: TypedContractEvent<
      ContentDeletedEvent.InputTuple,
      ContentDeletedEvent.OutputTuple,
      ContentDeletedEvent.OutputObject
    >;
  };
}
